package com.example.hiddendragon;

import java.util.Optional;
import java.util.Collection;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import lombok.Getter;
import lombok.Setter;
import org.springframework.validation.Errors;
import java.util.*;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import lombok.extern.slf4j.Slf4j;


@Slf4j
@Controller // This means that this class is a Controller
@RequestMapping(path="/") // This means URL's start with /demo (after Application path)
public class UserController {
  @Autowired // This means to get the bean called ItemRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private UserRepository userRepository;
  @Autowired
  private CartRepository cartRepository;

  @Getter
  @Setter
  class  Message{
      private String msg;
      public Message(String m){
          msg = m;
      }
  }
  class  ErrorMessages{
      private ArrayList<Message>  messages = new ArrayList<Message>();
      public void add (String msg){
          messages.add(new Message(msg));
      }
      public ArrayList<Message> getMessages() {return messages;
      }
      public void print(){
          for(Message m : messages){
              System.out.println(m.msg);
          }
      }
  }
  @PostMapping // Map ONLY POST Requests (path="/register")
  public @ResponseBody String registerUser (@ModelAttribute("command") User user, Model model, @RequestParam(value="action", required=true) String
  username, String password, String repeatPassword, HttpServletRequest request) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

   
    ErrorMessages msgs = new ErrorMessages();
    //if(user.getPassword() == repeatPassword){
      String user1 = user.getUsername();
      String pass = user.getPassword();
      User n = new User();
      n.setUsername(user1);
      n.setPassword(pass);
      userRepository.save(n);
  
      Cart c = new Cart();
      c.setUserId(n.getId());
      cartRepository.save(c);
    //}
   // else{
      // msgs.add("The passwords do not match");
      // msgs.print();
      // return "drugstore";

   // }
    
    return "drugstore";
    
  }


  


  // @GetMapping
  // public @ResponseBody Iterable<User> getAllUsers() {
  //   // This returns a JSON or XML with the users
  //   return userRepository.findAll();
  // }

  @GetMapping
      public String getAction( @ModelAttribute("command") User user, 
      Model model) {
    
          return "drugStore";
  
      }
      public @ResponseBody String loginUser (@Valid @ModelAttribute("login") User user, Model model,@RequestParam(value="action", required=true) String username
      , @RequestParam String password, HttpServletRequest request) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    Collection<User> u = userRepository.findUser(username, password);
    if(u.isEmpty()){
      return "auth failed";
     
    } else {
      return "auth success for " + u.iterator().next().toString();
    }
  }
}